main:
  comment: "Bootstraps the Cobra CLI, validates flags, then fetches, renders, and emits RGDs for each graph spec."

  main.max:
    comment: "Returns the greater of two ints when seeding the concurrency flag default."

  config.Load:
    comment: "Reads the graphs config YAML, validates required fields, and fills default values."

  helmfetch.EnsureChart:
    comment: "Ensures an OCI Helm chart is cached locally, downloading it if needed."
    helmfetch.splitOCI:
      comment: "Splits an OCI reference into repository and version segments."
    helmfetch.sanitize:
      comment: "Maps path separators and colons to underscores for cache filenames."

  render.RenderChart:
    comment: "Loads a cached Helm chart, renders templates with computed values, and returns manifests plus CRDs."
    render.buildValues:
      comment: "Builds the Helm values map from ValuesSpec, normalizing nested maps and slices for Helm consumption."
      render.cloneMap:
        comment: "Deep-copies map[string]any trees to avoid shared references."
      render.cloneSliceOfMaps:
        comment: "Produces deep copies of []map[string]any lists for safe reuse."
  render.SplitYAML:
    comment: "Splits a multi-document YAML string into trimmed docs with trailing newlines."

  kro.EmitRGDs:
    comment: "Parses rendered manifests, classifies them, builds CRD and controller RGDs, and writes YAML outputs."
    kro.toUpperService:
      comment: "Uppercases the first rune of a trimmed service name for display."
    classify.Parse:
      comment: "Unmarshals a YAML document into an Obj capturing API metadata and trimmed raw YAML."
    render.SplitYAML:
      comment: "Splits a multi-document YAML string into trimmed docs with trailing newlines."
    classify.Classify:
      comment: "Buckets parsed objects into CRDs, core, RBAC, deployments, and others with deterministic ordering."
    kro.buildCRDResources:
      comment: "Transforms CRD objects into graph resources with stable IDs."
      kro.makeID:
        comment: "Normalizes arbitrary strings into lowercase, dash-safe identifiers with a fallback."
    kro.buildControllerResources:
      comment: "Converts non-CRD objects into controller graph resources with de-duplicated IDs."
      kro.controllerIDForKind:
        comment: "Formats a Kubernetes kind into a controller graph resource ID."
        kro.makeID:
          comment: "Normalizes arbitrary strings into lowercase, dash-safe identifiers with a fallback."
    kro.MakeCRDsRGD:
      comment: "Composes the CRD graph RGD shell and attaches generated CRD resources."
      kro.CRDSchema:
        comment: "Builds the CRD graph schema with shared defaults and reconcile resource placeholders."
        kro.buildSchemaSpec:
          comment: "Normalizes schema spec construction with placeholder-aware name and namespace defaults."
    kro.MakeCtrlRGD:
      comment: "Builds the controller RGD, prepending a graph-crd resource and embedding schema metadata."
      kro.makeGraphCRDItem:
        comment: "Produces the synthetic graph-crd resource inserted ahead of controller assets."
      kro.CtrlSchema:
        comment: "Defines controller graph schema metadata and injects computed values placeholders."
        kro.buildSchemaSpec:
          comment: "Normalizes schema spec construction with placeholder-aware name and namespace defaults."
        placeholders.ControllerValues:
          comment: "Synthesizes schema values defaults from GraphSpec inputs, chart defaults, and discovered CRDs."
          placeholders.controllerDefaults:
            comment: "Derives allowable schema keys and formatted defaults from flattened chart defaults or templates."
            placeholders.resolveControllerDefaults:
              comment: "Resolves each schema default either from chart defaults or GraphSpec-driven token replacement."
              placeholders.flattenChartDefaults:
                comment: "Recursively flattens nested chart defaults into dot-separated scalar entries."
              placeholders.schemaDefaultValue:
                comment: "Looks up a schema default string for a dotted path."
              placeholders.resolveTokens:
                comment: "Expands controller placeholder tokens using service-specific fallbacks."
                placeholders.defaultControllerName:
                  comment: "Generates the canonical controller release name from the service or defaults."
                placeholders.defaultImageRepository:
                  comment: "Builds the default ACK controller image repository for a service."
                placeholders.defaultImageTag:
                  comment: "Falls back to the GraphSpec version when the image tag is unset."
                placeholders.defaultNamespace:
                  comment: "Uses the GraphSpec namespace or the ack-system default."
              placeholders.schemaPathSegments:
                comment: "Parses a ${schema.spec...} reference into path segments for traversal."
            placeholders.setNestedValue:
              comment: "Navigates or creates nested maps to assign computed defaults."
            placeholders.formatSchemaDefault:
              comment: "Annotates defaults with type hints based on schema path heuristics."
              placeholders.typeForPath:
                comment: "Infers a schema value type from the dotted path suffix."
          placeholders.StringDefault:
            comment: "Wraps fallback logic for string defaults when values are blank."
          placeholders.schemaDefaultValue:
            comment: "Looks up a schema default string for a dotted path."
          placeholders.schemaDefaultBool:
            comment: "Evaluates schema default strings as booleans."
          placeholders.schemaDefaultInt:
            comment: "Parses schema default strings as integers for comparison."
          placeholders.schemaFeatureGateDefaults:
            comment: "Parses the feature gate default object into Go booleans for diffing overrides."
          placeholders.BoolDefault:
            comment: "Formats boolean defaults while honoring explicit overrides."
          placeholders.IntDefault:
            comment: "Formats integer defaults with type annotations."
          placeholders.StringSliceDefault:
            comment: "Formats string slice defaults while removing blanks and duplicates."
          placeholders.MapOrDefault:
            comment: "Converts annotation maps into map[string]any or an empty object default marker."
        placeholders.StringDefault:
          comment: "Wraps fallback logic for string defaults when values are blank."
    kro.writeYAML:
      comment: "Serializes an RGD to YAML, applies placeholder substitutions, and writes it to disk."
      kro.marshalYAML:
        comment: "Encodes a value to YAML with 2-space indentation."
      placeholders.ReplaceYAMLScalars:
        comment: "Traverses YAML scalars and rewrites sentinel strings to schema placeholders."
        placeholders.applyScalarReplace:
          comment: "Recursively rewrites scalar nodes using sentinel/schema replacement rules."
          placeholders.ReplaceAll:
            comment: "Applies sentinel-to-schema substitution (and optionally schema defaults) in order."
            placeholders.ApplySentinelToSchema:
              comment: "Replaces known sentinel tokens with their schema references, longest-first."
