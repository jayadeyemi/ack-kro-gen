package replace

// Map template sentinels -> schema references used inside resource blocks.
var SentinelToSchema = map[string]string{
	"NAME":                                 "${schema.spec.name}",
	"NAMESPACE":                            "${schema.spec.namespace}",
	"AWS_ACCOUNT_ID":                       "${schema.spec.aws.accountID}",
	"AWS_REGION":                           "${schema.spec.aws.region}",
	"AWS_ENDPOINT_URL":                     "${schema.spec.aws.endpoint_url}",
	"AWS_SECRET_NAME":                      "${schema.spec.aws.credentials.secretName}",
	"AWS_SECRET_KEY":                       "${schema.spec.aws.credentials.secretKey}",
	"AWS_PROFILE":                          "${schema.spec.aws.credentials.profile}",
	"DELETION_POLICY":                      "${schema.spec.deletionPolicy}",
	"IMAGE_REPOSITORY":                     "${schema.spec.image.repository}",
	"IMAGE_TAG":                            "${schema.spec.image.tag}",
	"IMAGE_PULL_POLICY":                    "${schema.spec.image.pullPolicy}",
	"IMAGE_PULL_SECRETS":                   "${schema.spec.image.pullSecrets}",
	"DEP_REPLICAS":                         "${schema.spec.deployment.replicas}",
	"DEP_PORT":                             "${schema.spec.deployment.containerPort}",
	"DEP_LABELS":                           "${schema.spec.deployment.labels}",
	"DEP_ANNOTATIONS":                      "${schema.spec.deployment.annotations}",
	"DEP_NODE_SELECTOR":                    "${schema.spec.deployment.nodeSelector}",
	"DEP_TOLERATIONS":                      "${schema.spec.deployment.tolerations}",
	"DEP_AFFINITY":                         "${schema.spec.deployment.affinity}",
	"DEP_PRIORITY_CLASS":                   "${schema.spec.deployment.priorityClassName}",
	"DEP_HOST_NETWORK":                     "${schema.spec.deployment.hostNetwork}",
	"DEP_DNS_POLICY":                       "${schema.spec.deployment.dnsPolicy}",
	"DEP_STRATEGY":                         "${schema.spec.deployment.strategy}",
	"DEP_EXTRA_VOLUMES":                    "${schema.spec.deployment.extraVolumes}",
	"DEP_EXTRA_VOLUME_MOUNTS":              "${schema.spec.deployment.extraVolumeMounts}",
	"DEP_EXTRA_ENV_VARS":                   "${schema.spec.deployment.extraEnvVars}",
	"RES_REQUESTS_MEMORY":                  "${schema.spec.resources.requests.memory}",
	"RES_REQUESTS_CPU":                     "${schema.spec.resources.requests.cpu}",
	"RES_LIMITS_MEMORY":                    "${schema.spec.resources.limits.memory}",
	"RES_LIMITS_CPU":                       "${schema.spec.resources.limits.cpu}",
	"ROLE_LABELS":                          "${schema.spec.role.labels}",
	"METRICS_SERVICE_CREATE":               "${schema.spec.metrics.service.create}",
	"METRICS_SERVICE_TYPE":                 "${schema.spec.metrics.service.type}",
	"LOG_DEV":                              "${schema.spec.log.enable_development_logging}",
	"LOG_LEVEL":                            "${schema.spec.log.level}",
	"INSTALL_SCOPE":                        "${schema.spec.installScope}",
	"WATCH_NAMESPACE":                      "${schema.spec.watchNamespace}",
	"WATCH_SELECTORS":                      "${schema.spec.watchSelectors}",
	"RESOURCE_TAGS":                        "${schema.spec.resourceTags}",
	"RECONCILE_DEFAULT_RESYNC":             "${schema.spec.reconcile.defaultResyncPeriod}",
	"RECONCILE_RESOURCE_RESYNCS":           "${schema.spec.reconcile.resourceResyncPeriods}",
	"RECONCILE_DEFAULT_MAX_CONC":           "${schema.spec.reconcile.defaultMaxConcurrentSyncs}",
	"RECONCILE_RESOURCE_MAX_CONC":          "${schema.spec.reconcile.resourceMaxConcurrentSyncs}",
	"RECONCILE_RESOURCES":                  "${schema.spec.reconcile.resources}",
	"ENABLE_CARM":                          "${schema.spec.enableCARM}",
	"FEATURE_GATES":                        "${schema.spec.featureGates}",
	"SA_CREATE":                            "${schema.spec.serviceAccount.create}",
	"SA_NAME":                              "${schema.spec.serviceAccount.name}",
	"SA_ANNOTATIONS":                       "${schema.spec.serviceAccount.annotations}",
	"LEADER_ELECTION_ENABLED":              "${schema.spec.leaderElection.enabled}",
	"LEADER_ELECTION_NAMESPACE":            "${schema.spec.leaderElection.namespace}",
	// Convenience IRSA
	"IAM_ROLE_OIDC_PROVIDER":               "${schema.spec.iamRole.oidcProvider}",
	"IAM_ROLE_MAX_SESSION_DURATION":        "${schema.spec.iamRole.maxSessionDuration}",
	"IAM_ROLE_DESCRIPTION":                 "${schema.spec.iamRole.roleDescription}",
	// Known tag sentinels in templates
	"CONTROLLER_SERVICE":                   "${schema.spec.name}",
	"CONTROLLER_VERSION":                   "${schema.spec.image.tag}",
}

// Map schema references -> concrete defaults for filling ${...} when writing defaults.
var SchemaDefaults = map[string]string{
	"${schema.spec.name}":                                     "ack-ec2-controller",
	"${schema.spec.namespace}":                                "ack-system",
	"${schema.spec.aws.accountID}":                            "",
	"${schema.spec.aws.region}":                               "",
	"${schema.spec.aws.endpoint_url}":                         "",
	"${schema.spec.aws.credentials.secretName}":               "",
	"${schema.spec.aws.credentials.secretKey}":                "credentials",
	"${schema.spec.aws.credentials.profile}":                  "default",
	"${schema.spec.deletionPolicy}":                           "delete",
	"${schema.spec.image.repository}":                         "public.ecr.aws/aws-controllers-k8s/ec2-controller",
	"${schema.spec.image.tag}":                                "1.7.0",
	"${schema.spec.image.pullPolicy}":                         "IfNotPresent",
	"${schema.spec.image.pullSecrets}":                        "[]",
	"${schema.spec.deployment.replicas}":                      "1",
	"${schema.spec.deployment.containerPort}":                 "8080",
	"${schema.spec.deployment.labels}":                        "{}",
	"${schema.spec.deployment.annotations}":                   "{}",
	"${schema.spec.deployment.nodeSelector}":                  `{"kubernetes.io/os":"linux"}`,
	"${schema.spec.deployment.tolerations}":                   "[]",
	"${schema.spec.deployment.affinity}":                      "{}",
	"${schema.spec.deployment.priorityClassName}":             `""`,
	"${schema.spec.deployment.hostNetwork}":                   "false",
	"${schema.spec.deployment.dnsPolicy}":                     "ClusterFirst",
	"${schema.spec.deployment.strategy}":                      "{}",
	"${schema.spec.deployment.extraVolumes}":                  "[]",
	"${schema.spec.deployment.extraVolumeMounts}":             "[]",
	"${schema.spec.deployment.extraEnvVars}":                  "[]",
	"${schema.spec.resources.requests.memory}":                "64Mi",
	"${schema.spec.resources.requests.cpu}":                   "50m",
	"${schema.spec.resources.limits.memory}":                  "128Mi",
	"${schema.spec.resources.limits.cpu}":                     "100m",
	"${schema.spec.role.labels}":                              "{}",
	"${schema.spec.metrics.service.create}":                   "false",
	"${schema.spec.metrics.service.type}":                     "ClusterIP",
	"${schema.spec.log.enable_development_logging}":           "false",
	"${schema.spec.log.level}":                                "info",
	"${schema.spec.installScope}":                             "cluster",
	"${schema.spec.watchNamespace}":                           `""`,
	"${schema.spec.watchSelectors}":                           `""`,
	"${schema.spec.resourceTags}":                             `["services.k8s.aws/controller-version=CONTROLLER_SERVICE-CONTROLLER_VERSION","services.k8s.aws/namespace=K8S_NAMESPACE"]`,
	"${schema.spec.reconcile.defaultResyncPeriod}":            "36000",
	"${schema.spec.reconcile.resourceResyncPeriods}":          "{}",
	"${schema.spec.reconcile.defaultMaxConcurrentSyncs}":      "1",
	"${schema.spec.reconcile.resourceMaxConcurrentSyncs}":     "{}",
	"${schema.spec.reconcile.resources}":                      "[]",
	"${schema.spec.enableCARM}":                               "true",
	"${schema.spec.featureGates}":                             `{"ServiceLevelCARM":false,"TeamLevelCARM":false,"ReadOnlyResources":true,"ResourceAdoption":true}`,
	"${schema.spec.serviceAccount.create}":                    "true",
	"${schema.spec.serviceAccount.name}":                      "ack-ec2-controller",
	"${schema.spec.serviceAccount.annotations}":               "{}",
	"${schema.spec.leaderElection.enabled}":                   "false",
	"${schema.spec.leaderElection.namespace}":                 "${schema.spec.namespace}",
	// IRSA convenience
	"${schema.spec.iamRole.oidcProvider}":                     "",
	"${schema.spec.iamRole.maxSessionDuration}":               "3600",
	"${schema.spec.iamRole.roleDescription}":                  "IRSA role for ACK ec2 controller deployment on EKS cluster using KRO Resource Graph",
}
