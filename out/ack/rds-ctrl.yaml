apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: ack-rds-ctrl.kro.run
  namespace: kro
spec:
  schema:
    apiVersion: v1alpha1
    kind: Rdscontroller
    spec:
      name: string | default=ack-rds-controller
      namespace: string | default=ack-system
      values:
        aws:
          credentials:
            profile: string | default=default
            secretKey: string | default=credentials
            secretName: string | default=""
          region: string | default=""
        deletionPolicy: string | default=delete
        deployment:
          affinity: object | default={}
          annotations: object | default={}
          containerPort: integer | default=8080
          dnsPolicy: string | default=ClusterFirst
          extraEnvVars: object | default={}
          extraVolumeMounts: object | default={}
          extraVolumes: object | default={}
          hostNetwork: boolean | default=false
          labels: object | default={}
          nodeSelector: object | default={"kubernetes.io/os":"linux"}
          priorityClassName: string | default=""
          replicas: integer | default=1
          strategy: object | default={}
          tolerations: object | default={}
        enableCARM: boolean | default=true
        featureGates: object | default={"ServiceLevelCARM":false,"TeamLevelCARM":false,"ReadOnlyResources":true,"ResourceAdoption":true}
        iamRole:
          maxSessionDuration: integer | default=3600
          oidcProvider: string | default=""
          roleDescription: string | default=IRSA role for ACK rds controller deployment on EKS cluster using KRO Resource Graph
        image:
          pullPolicy: string | default=IfNotPresent
          pullSecrets: string[] | default=[]
          repository: string | default=public.ecr.aws/aws-controllers-k8s/rds-controller
          tag: string | default=1.6.2
        installScope: string | default=cluster
        leaderElection:
          enabled: boolean | default=false
          namespace: string | default=""
        log:
          enable_development_logging: boolean | default=false
          level: string | default=info
        metrics:
          service:
            create: boolean | default=false
            type: string | default=ClusterIP
        reconcile:
          defaultMaxConcurrentSyncs: integer | default=1
          defaultResyncPeriod: integer | default=36000
          resourceMaxConcurrentSyncs: object | default={}
          resourceResyncPeriods: object | default={}
          resources: string[] | default=["AdoptedResource","DBClusterEndpoint","DBClusterParameterGroup","DBCluster","DBClusterSnapshot","DBInstance","DBParameterGroup","DBProxy","DBSnapshot","DBSubnetGroup","FieldExport","GlobalCluster"]
        resourceTags: string[] | default=["services.k8s.aws/controller-version=ack-rds-controller-1.6.2","services.k8s.aws/namespace=ack-system"]
        resources:
          limits:
            cpu: string | default=100m
            memory: string | default=128Mi
          requests:
            cpu: string | default=50m
            memory: string | default=64Mi
        role:
          labels: object | default={}
        serviceAccount:
          annotations: object | default={}
          create: boolean | default=true
          name: string | default=ack-rds-controller
        watchNamespace: string | default=""
        watchSelectors: string | default=""
  resources:
    - id: graph-rds-crds
      template:
        apiVersion: kro.run/v1alpha1
        kind: Rdscrdgraph
        metadata:
          name: ${schema.spec.name}-crd-graph
        spec:
          name: ${schema.spec.name}-crd-graph
    - id: graph-serviceaccount
      template:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          annotations: ${schema.spec.serviceAccount.annotations}
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.serviceAccount.name}
          namespace: ${schema.spec.namespace}
    - id: graph-clusterrole
      template:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.name}-rds-chart
        rules:
          - apiGroups:
              - ""
            resources:
              - configmaps
              - secrets
            verbs:
              - get
              - list
              - patch
              - watch
          - apiGroups:
              - ""
            resources:
              - namespaces
            verbs:
              - get
              - list
              - watch
          - apiGroups:
              - ec2.services.k8s.aws
            resources:
              - securitygroups
              - securitygroups/status
              - subnets
              - subnets/status
            verbs:
              - get
              - list
          - apiGroups:
              - kms.services.k8s.aws
            resources:
              - keys
              - keys/status
            verbs:
              - get
              - list
          - apiGroups:
              - rds.services.k8s.aws
            resources:
              - dbclusterendpoints
              - dbclusterparametergroups
              - dbclusters
              - dbclustersnapshots
              - dbinstances
              - dbparametergroups
              - dbproxies
              - dbsnapshots
              - dbsubnetgroups
              - globalclusters
            verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
          - apiGroups:
              - rds.services.k8s.aws
            resources:
              - dbclusterendpoints/status
              - dbclusterparametergroups/status
              - dbclusters/status
              - dbclustersnapshots/status
              - dbinstances/status
              - dbparametergroups/status
              - dbproxies/status
              - dbsnapshots/status
              - dbsubnetgroups/status
              - globalclusters/status
            verbs:
              - get
              - patch
              - update
          - apiGroups:
              - services.k8s.aws
            resources:
              - adoptedresources
              - fieldexports
            verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
          - apiGroups:
              - services.k8s.aws
            resources:
              - adoptedresources/status
              - fieldexports/status
            verbs:
              - get
              - patch
              - update
    - id: graph-clusterrole-2
      template:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.name}-rds-chart-namespaces-cache
        rules:
          - apiGroups:
              - ""
            resources:
              - namespaces
            verbs:
              - get
              - list
              - watch
    - id: graph-clusterrolebinding
      template:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.name}-rds-chart-namespaces-cache
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ${schema.spec.name}-rds-chart-namespaces-cache
        subjects:
          - kind: ServiceAccount
            name: ${schema.spec.serviceAccount.name}
            namespace: _KRO${schema.spec.namespace}
    - id: graph-clusterrolebinding-2
      template:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.name}-rds-chart-rolebinding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ${schema.spec.name}-rds-chart
        subjects:
          - kind: ServiceAccount
            name: ${schema.spec.serviceAccount.name}
            namespace: _KRO${schema.spec.namespace}
    - id: graph-role
      template:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.name}-rds-chart-configmaps-cache
          namespace: _KRO${schema.spec.namespace}
        rules:
          - apiGroups:
              - ""
            resources:
              - configmaps
            verbs:
              - get
              - list
              - watch
    - id: graph-role-2
      template:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.name}-rds-chart-reader
          namespace: _KRO${schema.spec.namespace}
        rules:
          - apiGroups:
              - rds.services.k8s.aws
            resources:
              - dbclusters
              - dbclusterendpoints
              - dbclusterparametergroups
              - dbclustersnapshots
              - dbinstances
              - dbparametergroups
              - dbproxies
              - dbsnapshots
              - dbsubnetgroups
              - globalclusters
            verbs:
              - get
              - list
              - watch
    - id: graph-role-3
      template:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.name}-rds-chart-writer
          namespace: _KRO${schema.spec.namespace}
        rules:
          - apiGroups:
              - rds.services.k8s.aws
            resources:
              - dbclusters
              - dbclusterendpoints
              - dbclusterparametergroups
              - dbclustersnapshots
              - dbinstances
              - dbparametergroups
              - dbproxies
              - dbsnapshots
              - dbsubnetgroups
              - globalclusters
            verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
          - apiGroups:
              - rds.services.k8s.aws
            resources:
              - dbclusters
              - dbclusterendpoints
              - dbclusterparametergroups
              - dbclustersnapshots
              - dbinstances
              - dbparametergroups
              - dbproxies
              - dbsnapshots
              - dbsubnetgroups
              - globalclusters
            verbs:
              - get
              - patch
              - update
    - id: graph-rolebinding
      template:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.name}-rds-chart-configmaps-cache
          namespace: _KRO${schema.spec.namespace}
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: ${schema.spec.name}-rds-chart-configmaps-cache
        subjects:
          - kind: ServiceAccount
            name: ${schema.spec.serviceAccount.name}
            namespace: _KRO${schema.spec.namespace}
    - id: graph-deployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          annotations: ${schema.spec.deployment.annotations}
          labels:
            app.kubernetes.io/instance: ${schema.spec.name}
            app.kubernetes.io/managed-by: Kro
            app.kubernetes.io/name: rds-chart
            app.kubernetes.io/version: ${schema.spec.image.tag}
            helm.sh/chart: rds-chart-${schema.spec.image.tag}
            k8s-app: rds-chart
          name: ${schema.spec.name}-rds-chart
          namespace: ${schema.spec.namespace}
        spec:
          replicas: ${schema.spec.deployment.replicas}
          selector:
            matchLabels:
              app.kubernetes.io/instance: ${schema.spec.name}
              app.kubernetes.io/name: rds-chart
          template:
            metadata:
              annotations: ${schema.spec.deployment.annotations}
              labels:
                app.kubernetes.io/instance: ${schema.spec.name}
                app.kubernetes.io/managed-by: Kro
                app.kubernetes.io/name: rds-chart
                k8s-app: rds-chart
            spec:
              containers:
                - args:
                    - --aws-region
                    - ${schema.spec.aws.region}
                    - --aws-endpoint-url
                    - ${schema.spec.aws.endpoint_url}
                    - --log-level
                    - ${schema.spec.log.level}
                    - --resource-tags
                    - ${schema.spec.resourceTags}
                    - --watch-namespace
                    - ${schema.spec.watchNamespace}
                    - --watch-selectors
                    - ${schema.spec.watchSelectors}
                    - --reconcile-resources
                    - ${schema.spec.reconcile.resources}
                    - --deletion-policy
                    - ${schema.spec.deletionPolicy}
                    - --reconcile-default-resync-seconds
                    - ${schema.spec.reconcile.defaultResyncPeriod}
                    - --reconcile-default-max-concurrent-syncs
                    - ${schema.spec.reconcile.defaultMaxConcurrentSyncs}
                    - --feature-gates
                    - ${schema.spec.featureGates}
                    - --enable-carm
                    - ${schema.spec.enableCARM}
                  command:
                    - ./bin/controller
                  env:
                    - name: ACK_SYSTEM_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                    - name: AWS_REGION
                      value: ${schema.spec.aws.region}
                    - name: AWS_ENDPOINT_URL
                      value: ${schema.spec.aws.endpoint_url}
                    - name: ACK_WATCH_NAMESPACE
                      value: ${schema.spec.watchNamespace}
                    - name: ACK_WATCH_SELECTORS
                      value: ${schema.spec.watchSelectors}
                    - name: RECONCILE_RESOURCES
                      value: ${schema.spec.reconcile.resources}
                    - name: DELETION_POLICY
                      value: ${schema.spec.deletionPolicy}
                    - name: LEADER_ELECTION_NAMESPACE
                      value: ${schema.spec.leaderElection.namespace}
                    - name: ACK_LOG_LEVEL
                      value: ${schema.spec.log.level}
                    - name: ACK_RESOURCE_TAGS
                      value: ${schema.spec.resourceTags}
                    - name: RECONCILE_DEFAULT_RESYNC_SECONDS
                      value: ${schema.spec.reconcile.defaultResyncPeriod}
                    - name: RECONCILE_DEFAULT_MAX_CONCURRENT_SYNCS
                      value: ${schema.spec.reconcile.defaultMaxConcurrentSyncs}
                    - name: FEATURE_GATES
                      value: ${schema.spec.featureGates}
                  image: ${schema.spec.image.repository}:${schema.spec.image.tag}
                  imagePullPolicy: ${schema.spec.image.pullPolicy}
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 8081
                    initialDelaySeconds: 15
                    periodSeconds: 20
                  name: controller
                  ports:
                    - containerPort: ${schema.spec.deployment.containerPort}
                      name: http
                  readinessProbe:
                    httpGet:
                      path: /readyz
                      port: 8081
                    initialDelaySeconds: 5
                    periodSeconds: 10
                  resources:
                    limits:
                      cpu: ${schema.spec.resources.limits.cpu}
                      memory: ${schema.spec.resources.limits.memory}
                    requests:
                      cpu: ${schema.spec.resources.requests.cpu}
                      memory: ${schema.spec.resources.requests.memory}
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                        - ALL
                    privileged: false
                    readOnlyRootFilesystem: true
                    runAsNonRoot: true
              dnsPolicy: ClusterFirst
              hostIPC: false
              hostNetwork: false
              hostPID: false
              nodeSelector:
                kubernetes.io/os: linux
              securityContext:
                seccompProfile:
                  type: RuntimeDefault
              serviceAccountName: ${schema.spec.serviceAccount.name}
              terminationGracePeriodSeconds: 10
